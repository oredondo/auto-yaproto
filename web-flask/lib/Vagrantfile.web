# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "{% if vm_box is defined -%}{{ vm_box }}{% else %}precise64{%- endif %}"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "{%- if vm_box_url is defined -%}
                           {{ vm_box_url }}
                       {%- else -%}
                           https://files.vagrantup.com/precise64.box
                       {%- endif %}"

  {% if vms is defined -%}
  # Provision the box with root access, also modify the host files for 2-box
  # setup so they can talk to each other.  inline causes stdin error, this is
  # expected and harmless
  config.vm.provision :shell,
    :inline => "echo 'vagrant ALL=NOPASSWD: ALL' >> /etc/sudoers ;" +
               {% for attributes in vms.itervalues() -%}
               "echo '{{ attributes['ip'] }}  {{ attributes['hostnames']['primary'] }}' >> /etc/hosts ;" +
               {% if 'others' in attributes['hostnames'] -%}{% for hostname in attributes['hostnames']['others'] -%}
               "echo '{{ attributes['ip'] }}  {{ hostname }}' >> /etc/hosts ;" +
               {% endfor -%}{% endif -%}
               {% endfor -%}
               "mkdir -p /root/.ssh ;" +
               "cat /home/vagrant/.ssh/authorized_keys >> /root/.ssh/authorized_keys ;"
  # Configure the hostname and IPs for the machines
  {% for name, attributes in vms.iteritems() -%}
  config.vm.define :{{ name }} do |c|
    c.vm.hostname = "{{ attributes['hostnames']['primary'] }}"
    c.vm.network :private_network, ip: "{{ attributes['ip'] }}"
    {% if 'port_forwarding' in attributes -%}{% for guest, host in attributes['port_forwarding'] -%}
    c.vm.network :forwarded_port, guest: {{ guest }}, host: {{ host }}, auto_correct: true
    {% endfor -%}{% endif -%}
    if Vagrant.has_plugin?("vagrant-cachier")
      config.cache.enable :apt
    else
      printf("** Install vagrant-cachier plugin (vagrant plugin install vagrant-cachier) to speedup deploy.**\n")
    end
  end

  {% endfor -%}
  # Turn off HostIOCache on the SATA Controller, this was causing issue
  # with large I/O read/write operations (e.g. apt-get) and causing the
  # drive to be corrupted.
  config.vm.provider :virtualbox do |vb|
    vb.customize ["storagectl",:id,"--name","SATA Controller","--hostiocache","off"]
    vb.customize ["modifyvm", :id, "--memory", 1024]
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  end
  # setup a shared folder with the host's build folder to simplify installing local builds
  LOCAL_BUILD_DIR="/var/tmp/#{ENV['USER']}/build/"
  if File.directory?(LOCAL_BUILD_DIR)
    config.vm.synced_folder "/var/tmp/#{ENV['USER']}/build/", "/var/tmp/#{ENV['USER']}/build/"
  end
  {%- endif %}
end