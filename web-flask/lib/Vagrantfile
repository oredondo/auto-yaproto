# -*- mode: ruby -*-
# vi: set ft=ruby :
# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.

    # Habilita la venta de visualizaciÃ³n.
    # config.vm.provider :virtualbox do |vb|
    # vb.gui = true
    # end

  config.vm.box = "centos/7"
  config.vm.box_version = "1809.01"
  config.vm.synced_folder  "provisioning" , "/vagrant"

  {% for item in nodes %}
  config.vm.define "{{ item }}" do |{{ item }}|
    {% for net in nodes[item] %}
        {% if net.puerto %}
            {{ item }}.vm.network :forwarded_port, guest: {{ net.puerto }}, host: {{ net.puerto }}
            {{ item }}.vm.network :forwarded_port, guest: {{ net.puerto_mosquitto }}, host: {{ net.puerto_mosquitto }}
        {% endif %}
        {{ item }}.vm.network "private_network", ip: "{{ net.ip }}", virtualbox__intnet: true
    {% endfor %}
  end
  {% endfor %}

  {% for item in routers %}
  config.vm.define "{{ item }}" do |{{ item }}|
    {% for net in routers[item] %}
        {% if net.puerto %}
            {{ item }}.vm.network :forwarded_port, guest: {{ net.puerto }}, host: {{ net.puerto }}
            {{ item }}.vm.network :forwarded_port, guest: {{ net.puerto_mosquitto }}, host: {{ net.puerto_mosquitto }}
        {% endif %}
        {{ item }}.vm.network "private_network", ip: "{{ net.ip }}", virtualbox__intnet: true
    {% endfor %}
    {% if loop.last %}
        {{ item }}.vm.provision "ansible" do |ansible|
              ansible.playbook       = "provisioning/playbook.yml"
              ansible.limit          = "all"
              ansible.become = true
              ansible.groups = {
                "nodes" => [{% for item in nodes %}"{{ item }}"{% if not loop.last %},{% endif %}{% endfor %}],
                "routers" => [{% for item in routers %}"{{ item }}"{% if not loop.last %},{% endif %}{% endfor %}]
              }
              ansible.host_vars = {
                {% for nod in nodes %}
                "{{ nod }}" => {% for var in nodes[nod] %}{"gateway" => "{{ var.gateway }}",
                                 "ip" => "{{ var.ip }}",
                                 "puerto" => "{{ var.puerto }}",
                                 "puerto_mosquitto" => "{{ var.puerto_mosquitto }}"},{% endfor %}
                {% endfor %}
                {% for rout in routers %}
                "{{ rout }}" => {% for var in routers[rout] %}{% if var.puerto %}{"gateway" => "{{ var.gateway }}",
                                 "ip" => "{{ var.ip }}",
                                 "puerto" => "{{ var.puerto }}",
                                 "puerto_mosquitto" => "{{ var.puerto_mosquitto }}"{% endif %}{% if var.nets_destino %},
                                 "gateway_2" => "{{ var.gateway }}",
                                 "net_destino" => "{% for l in var.nets_destino %}{{ l }}{% if not loop.last %},{% endif %}"{% endfor %}{% endif %}{% endfor %}}{% if not loop.last %},{% endif %}
                {% endfor %}

              }

        end
    {% endif %}
  end
  {% endfor %}


  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false


  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
